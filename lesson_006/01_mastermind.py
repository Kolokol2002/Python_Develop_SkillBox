# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В этом модуле нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем делать в текущем модуле. Представьте, что движок игры могут использовать
# разные клиенты - веб, чатбот, приложение, етс - они знают как спрашивать и отвечать пользователю.
# Движок игры реализует только саму функциональность игры.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

# TODO здесь ваш код...

from mastermind_engine import guess_numbers, verify_number, _is_gameover, start_game
from termcolor import cprint



count_move = 0
while True:
    global next_game
    if count_move == 0:
        guess_numbers()
        # print(guess_numbers())
        cprint('Число загадане системою, постарайтесь відгадати)', on_color='on_white')
    number_user = start_game()
    result = verify_number(number_user)
    cprint('Результат: Биків - {}, а корів - {}'.format(result['bulls'], result['cows']), color='blue')
    count_move += 1
    if _is_gameover():
        cprint('Урааа! 4 бикаа. Ви виграли!!!', color='cyan',
               attrs=['bold', 'underline', 'reverse'])
        cprint('Кол-во ходов - {}'.format(count_move), color='cyan',
               attrs=['bold', 'underline', 'reverse'])
        count_move = 0
        print()
        next_game = input('Можливо ще одну партію?) ')

        list_answer_positive = ['да', 'го', 'давай']
        if next_game.lower() in list_answer_positive:
            continue
        else:
            cprint('Гра закінчена!', color='red')
            break
